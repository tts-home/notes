"use strict";(self.webpackChunktts_notes=self.webpackChunktts_notes||[]).push([[9023],{5075:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=s(5893),r=s(1151);const o={},a="Supervisor",i={id:"cicd/other/supervisor",title:"Supervisor",description:"supervisord.conf",source:"@site/docs/cicd/other/supervisor.md",sourceDirName:"cicd/other",slug:"/cicd/other/supervisor",permalink:"/notes/cicd/other/supervisor",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Dock Maven Plugin",permalink:"/notes/cicd/maven/docker_maven_plugin"},next:{title:"Commands",permalink:"/notes/cicd/podman/commands"}},l={},d=[{value:"supervisord.conf",id:"supervisordconf",level:2},{value:"app.ini",id:"appini",level:2},{value:"Comands",id:"comands",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"supervisor",children:"Supervisor"})}),"\n",(0,n.jsx)(t.h2,{id:"supervisordconf",children:"supervisord.conf"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ini",children:'; Sample supervisor config file.\n;\n; For more information on the config file, please see:\n; http://supervisord.org/configuration.html\n;\n; Notes:\n;  - Shell expansion ("~" or "$HOME") is not supported.  Environment\n;    variables can be expanded using this syntax: "%(ENV_HOME)s".\n;  - Quotes around values are not supported, except in the case of\n;    the environment= options as shown below.\n;  - Comments must have a leading space: "a=b ;comment" not "a=b;comment".\n;  - Command will be truncated if it looks like a config file comment, e.g.\n;    "command=bash -c \'foo ; bar\'" will truncate to "command=bash -c \'foo ".\n;\n; Warning:\n;  Paths throughout this example file use /tmp because it is available on most\n;  systems.  You will likely need to change these to locations more appropriate\n;  for your system.  Some systems periodically delete older files in /tmp.\n;  Notably, if the socket file defined in the [unix_http_server] section below\n;  is deleted, supervisorctl will be unable to connect to supervisord.\n\n[unix_http_server]\nfile=/var/run/supervisor/supervisor.sock   ; the path to the socket file\n;chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n;  enabled by uncommenting the [inet_http_server] section below.  The inet\n;  HTTP server is intended for use within a trusted environment only.  It\n;  should only be bound to localhost or only accessible from within an\n;  isolated, trusted network.  The inet HTTP server does not support any\n;  form of encryption.  The inet HTTP server does not use authentication\n;  by default (see the username= and password= options to add authentication).\n;  Never expose the inet HTTP server to the public internet.\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB\nlogfile_backups=10           ; # of main logfile backups; 0 means none, default 10\nloglevel=info                ; log level; default info; others: debug,warn,trace\npidfile=/var/run/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid\nnodaemon=false               ; start in foreground if true; default false\nsilent=false                 ; no logs to stdout if true; default false\nminfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is \'supervisor\'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don\'t clean up tempfiles at start; default false\n;childlogdir=/tmp            ; \'AUTO\' child log dir, default $TEMP\n;environment=KEY="value"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n\n; The rpcinterface:supervisor section must remain in the config file for\n; RPC (supervisorctl/web interface) to work.  Additional interfaces may be\n; added by defining them in separate [rpcinterface:x] sections.\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n; The supervisorctl section configures how supervisorctl will connect to\n; supervisord.  configure it match the settings in either the unix_http_server\n; or inet_http_server section.\n[supervisorctl]\nserverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default "supervisor")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more \'real\' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n;command=/bin/cat              ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n;exitcodes=0                   ; \'expected\' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_capture_maxbytes=1MB   ; number of bytes in \'capturemode\' (default 0)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_capture_maxbytes=1MB   ; number of bytes in \'capturemode\' (default 0)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A="1",B="2"       ; process environment additions (def no adds)\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample eventlistener section below shows all possible eventlistener\n; subsection values.  Create one or more \'real\' eventlistener: sections to be\n; able to handle event notifications sent by supervisord.\n\n;[eventlistener:theeventlistenername]\n;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;events=EVENT                  ; event notif. types to subscribe to (req\'d)\n;buffer_size=10                ; event buffer queue size (default 10)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n;exitcodes=0                   ; \'expected\' exit codes used with autorestart (default 0)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;stopasgroup=false             ; send stop signal to the UNIX process group (default false)\n;killasgroup=false             ; SIGKILL the UNIX process group (def false)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stdout_syslog=false           ; send stdout to syslog with process name (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;stderr_syslog=false           ; send stderr to syslog with process name (default false)\n;environment=A="1",B="2"       ; process environment additions\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The sample group section below shows all possible group values.  Create one\n; or more \'real\' group: sections to create "heterogeneous" process groups.\n\n;[group:thegroupname]\n;programs=progname1,progname2  ; each refers to \'x\' in [program:x] definitions\n;priority=999                  ; the relative start priority (default 999)\n\n; The [include] section can just contain the "files" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\nfiles = app/*.ini\n'})}),"\n",(0,n.jsx)(t.h2,{id:"appini",children:"app.ini"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ini",children:"[program:tts-web]\ncommand=java -Dspring.sql.init.mode=NEVER -jar /data/app/tts-web-app/tts-web-app.jar\nprocess_name=%(program_name)s\ndirectory=/data/app/tts-web-app\nautostart=false\nautorestart=false\nexitcodes=0\nredirect_stderr=false\nstdout_logfile=/var/log/supervisor/tts-web-app.stdout.log\nstdout_logfile_maxbytes=5MB\nstdout_logfile_backups=10\nstdout_capture_maxbytes=1MB\nstdout_events_enabled=false\nstderr_logfile=/var/log/supervisor/tts-web-app.stderr.log\nstderr_logfile_maxbytes=5MB\nstderr_logfile_backups=10\nstderr_capture_maxbytes=1MB\nstderr_events_enabled=false\n"})}),"\n",(0,n.jsx)(t.h2,{id:"comands",children:"Comands"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"supervisorctl reread\nsupervisorctl update\nsupervisorctl status\nsupervisorctl start app-name\nsupervisorctl stop app-name\nsupervisorctl restart app-name\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>a});var n=s(7294);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);