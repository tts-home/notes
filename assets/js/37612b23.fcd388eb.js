"use strict";(self.webpackChunktts_notes=self.webpackChunktts_notes||[]).push([[3984],{8680:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>_,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=n(5893),o=n(1151);const r={},i="Docker Entrypoint",a={id:"database/mysql/docker_entrypoint.sh",title:"Docker Entrypoint",description:"* https://github.com/docker-library/mysql/blob/master/8.0/docker-entrypoint.sh",source:"@site/docs/database/mysql/docker_entrypoint.sh.md",sourceDirName:"database/mysql",slug:"/database/mysql/docker_entrypoint.sh",permalink:"/notes/database/mysql/docker_entrypoint.sh",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\u5e38\u7528\u547d\u4ee4",permalink:"/notes/database/mysql/commands"},next:{title:"Mysql \u914d\u7f6e\u6587\u4ef6",permalink:"/notes/database/mysql/mysql.cnf"}},l={},c=[];function d(t){const e={a:"a",code:"code",h1:"h1",li:"li",pre:"pre",ul:"ul",...(0,o.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"docker-entrypoint",children:"Docker Entrypoint"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/docker-library/mysql/blob/master/8.0/docker-entrypoint.sh",children:"https://github.com/docker-library/mysql/blob/master/8.0/docker-entrypoint.sh"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-shell",children:'#!/bin/bash\nset -eo pipefail\nshopt -s nullglob\n\n# logging functions\nmysql_log() {\n\tlocal type="$1"; shift\n\t# accept argument string or stdin\n\tlocal text="$*"; if [ "$#" -eq 0 ]; then text="$(cat)"; fi\n\tlocal dt; dt="$(date --rfc-3339=seconds)"\n\tprintf \'%s [%s] [Entrypoint]: %s\\n\' "$dt" "$type" "$text"\n}\nmysql_note() {\n\tmysql_log Note "$@"\n}\nmysql_warn() {\n\tmysql_log Warn "$@" >&2\n}\nmysql_error() {\n\tmysql_log ERROR "$@" >&2\n\texit 1\n}\n\n# usage: file_env VAR [DEFAULT]\n#    ie: file_env \'XYZ_DB_PASSWORD\' \'example\'\n# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of\n#  "$XYZ_DB_PASSWORD" from a file, especially for Docker\'s secrets feature)\nfile_env() {\n\tlocal var="$1"\n\tlocal fileVar="${var}_FILE"\n\tlocal def="${2:-}"\n\tif [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then\n\t\tmysql_error "Both $var and $fileVar are set (but are exclusive)"\n\tfi\n\tlocal val="$def"\n\tif [ "${!var:-}" ]; then\n\t\tval="${!var}"\n\telif [ "${!fileVar:-}" ]; then\n\t\tval="$(< "${!fileVar}")"\n\tfi\n\texport "$var"="$val"\n\tunset "$fileVar"\n}\n\n# check to see if this file is being run or sourced from another script\n_is_sourced() {\n\t# https://unix.stackexchange.com/a/215279\n\t[ "${#FUNCNAME[@]}" -ge 2 ] \\\n\t\t&& [ "${FUNCNAME[0]}" = \'_is_sourced\' ] \\\n\t\t&& [ "${FUNCNAME[1]}" = \'source\' ]\n}\n\n# usage: docker_process_init_files [file [file [...]]]\n#    ie: docker_process_init_files /always-initdb.d/*\n# process initializer files, based on file extensions\ndocker_process_init_files() {\n\t# mysql here for backwards compatibility "${mysql[@]}"\n\tmysql=( docker_process_sql )\n\n\techo\n\tlocal f\n\tfor f; do\n\t\tcase "$f" in\n\t\t\t*.sh)\n\t\t\t\t# https://github.com/docker-library/postgres/issues/450#issuecomment-393167936\n\t\t\t\t# https://github.com/docker-library/postgres/pull/452\n\t\t\t\tif [ -x "$f" ]; then\n\t\t\t\t\tmysql_note "$0: running $f"\n\t\t\t\t\t"$f"\n\t\t\t\telse\n\t\t\t\t\tmysql_note "$0: sourcing $f"\n\t\t\t\t\t. "$f"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t*.sql)     mysql_note "$0: running $f"; docker_process_sql < "$f"; echo ;;\n\t\t\t*.sql.gz)  mysql_note "$0: running $f"; gunzip -c "$f" | docker_process_sql; echo ;;\n\t\t\t*.sql.xz)  mysql_note "$0: running $f"; xzcat "$f" | docker_process_sql; echo ;;\n\t\t\t*.sql.zst) mysql_note "$0: running $f"; zstd -dc "$f" | docker_process_sql; echo ;;\n\t\t\t*)         mysql_warn "$0: ignoring $f" ;;\n\t\tesac\n\t\techo\n\tdone\n}\n\n# arguments necessary to run "mysqld --verbose --help" successfully (used for testing configuration validity and for extracting default/configured values)\n_verboseHelpArgs=(\n\t--verbose --help\n\t--log-bin-index="$(mktemp -u)" # https://github.com/docker-library/mysql/issues/136\n)\n\nmysql_check_config() {\n\tlocal toRun=( "$@" "${_verboseHelpArgs[@]}" ) errors\n\tif ! errors="$("${toRun[@]}" 2>&1 >/dev/null)"; then\n\t\tmysql_error $\'mysqld failed while attempting to check config\\n\\tcommand was: \'"${toRun[*]}"$\'\\n\\t\'"$errors"\n\tfi\n}\n\n# Fetch value from server config\n# We use mysqld --verbose --help instead of my_print_defaults because the\n# latter only show values present in config files, and not server defaults\nmysql_get_config() {\n\tlocal conf="$1"; shift\n\t"$@" "${_verboseHelpArgs[@]}" 2>/dev/null \\\n\t\t| awk -v conf="$conf" \'$1 == conf && /^[^ \\t]/ { sub(/^[^ \\t]+[ \\t]+/, ""); print; exit }\'\n\t# match "datadir      /some/path with/spaces in/it here" but not "--xyz=abc\\n     datadir (xyz)"\n}\n\n# Ensure that the package default socket can also be used\n# since rpm packages are compiled with a different socket location\n# and "mysqlsh --mysql" doesn\'t read the [client] config\n# related to https://github.com/docker-library/mysql/issues/829\nmysql_socket_fix() {\n\tlocal defaultSocket\n\tdefaultSocket="$(mysql_get_config \'socket\' mysqld --no-defaults)"\n\tif [ "$defaultSocket" != "$SOCKET" ]; then\n\t\tln -sfTv "$SOCKET" "$defaultSocket" || :\n\tfi\n}\n\n# Do a temporary startup of the MySQL server, for init purposes\ndocker_temp_server_start() {\n\tif [ "${MYSQL_MAJOR}" = \'5.7\' ]; then\n\t\t"$@" --skip-networking --default-time-zone=SYSTEM --socket="${SOCKET}" &\n\t\tmysql_note "Waiting for server startup"\n\t\tlocal i\n\t\tfor i in {30..0}; do\n\t\t\t# only use the root password if the database has already been initialized\n\t\t\t# so that it won\'t try to fill in a password file when it hasn\'t been set yet\n\t\t\textraArgs=()\n\t\t\tif [ -z "$DATABASE_ALREADY_EXISTS" ]; then\n\t\t\t\textraArgs+=( \'--dont-use-mysql-root-password\' )\n\t\t\tfi\n\t\t\tif docker_process_sql "${extraArgs[@]}" --database=mysql <<<\'SELECT 1\' &> /dev/null; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tsleep 1\n\t\tdone\n\t\tif [ "$i" = 0 ]; then\n\t\t\tmysql_error "Unable to start server."\n\t\tfi\n\telse\n\t\t# For 5.7+ the server is ready for use as soon as startup command unblocks\n\t\tif ! "$@" --daemonize --skip-networking --default-time-zone=SYSTEM --socket="${SOCKET}"; then\n\t\t\tmysql_error "Unable to start server."\n\t\tfi\n\tfi\n}\n\n# Stop the server. When using a local socket file mysqladmin will block until\n# the shutdown is complete.\ndocker_temp_server_stop() {\n\tif ! mysqladmin --defaults-extra-file=<( _mysql_passfile ) shutdown -uroot --socket="${SOCKET}"; then\n\t\tmysql_error "Unable to shut down server."\n\tfi\n}\n\n# Verify that the minimally required password settings are set for new databases.\ndocker_verify_minimum_env() {\n\tif [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" -a -z "$MYSQL_RANDOM_ROOT_PASSWORD" ]; then\n\t\tmysql_error <<-\'EOF\'\n\t\t\tDatabase is uninitialized and password option is not specified\n\t\t\t    You need to specify one of the following:\n\t\t\t    - MYSQL_ROOT_PASSWORD\n\t\t\t    - MYSQL_ALLOW_EMPTY_PASSWORD\n\t\t\t    - MYSQL_RANDOM_ROOT_PASSWORD\n\t\tEOF\n\tfi\n\n\t# This will prevent the CREATE USER from failing (and thus exiting with a half-initialized database)\n\tif [ "$MYSQL_USER" = \'root\' ]; then\n\t\tmysql_error <<-\'EOF\'\n\t\t\tMYSQL_USER="root", MYSQL_USER and MYSQL_PASSWORD are for configuring a regular user and cannot be used for the root user\n\t\t\t    Remove MYSQL_USER="root" and use one of the following to control the root user password:\n\t\t\t    - MYSQL_ROOT_PASSWORD\n\t\t\t    - MYSQL_ALLOW_EMPTY_PASSWORD\n\t\t\t    - MYSQL_RANDOM_ROOT_PASSWORD\n\t\tEOF\n\tfi\n\n\t# warn when missing one of MYSQL_USER or MYSQL_PASSWORD\n\tif [ -n "$MYSQL_USER" ] && [ -z "$MYSQL_PASSWORD" ]; then\n\t\tmysql_warn \'MYSQL_USER specified, but missing MYSQL_PASSWORD; MYSQL_USER will not be created\'\n\telif [ -z "$MYSQL_USER" ] && [ -n "$MYSQL_PASSWORD" ]; then\n\t\tmysql_warn \'MYSQL_PASSWORD specified, but missing MYSQL_USER; MYSQL_PASSWORD will be ignored\'\n\tfi\n}\n\n# creates folders for the database\n# also ensures permission for user mysql of run as root\ndocker_create_db_directories() {\n\tlocal user; user="$(id -u)"\n\n\t# TODO other directories that are used by default? like /var/lib/mysql-files\n\t# see https://github.com/docker-library/mysql/issues/562\n\tmkdir -p "$DATADIR"\n\n\tif [ "$user" = "0" ]; then\n\t\t# this will cause less disk access than `chown -R`\n\t\tfind "$DATADIR" \\! -user mysql -exec chown mysql \'{}\' +\n\tfi\n}\n\n# initializes the database directory\ndocker_init_database_dir() {\n\tmysql_note "Initializing database files"\n\t"$@" --initialize-insecure --default-time-zone=SYSTEM\n\tmysql_note "Database files initialized"\n}\n\n# Loads various settings that are used elsewhere in the script\n# This should be called after mysql_check_config, but before any other functions\ndocker_setup_env() {\n\t# Get config\n\tdeclare -g DATADIR SOCKET\n\tDATADIR="$(mysql_get_config \'datadir\' "$@")"\n\tSOCKET="$(mysql_get_config \'socket\' "$@")"\n\n\t# Initialize values that might be stored in a file\n\tfile_env \'MYSQL_ROOT_HOST\' \'%\'\n\tfile_env \'MYSQL_DATABASE\'\n\tfile_env \'MYSQL_USER\'\n\tfile_env \'MYSQL_PASSWORD\'\n\tfile_env \'MYSQL_ROOT_PASSWORD\'\n\n\tdeclare -g DATABASE_ALREADY_EXISTS\n\tif [ -d "$DATADIR/mysql" ]; then\n\t\tDATABASE_ALREADY_EXISTS=\'true\'\n\tfi\n}\n\n# Execute sql script, passed via stdin\n# usage: docker_process_sql [--dont-use-mysql-root-password] [mysql-cli-args]\n#    ie: docker_process_sql --database=mydb <<<\'INSERT ...\'\n#    ie: docker_process_sql --dont-use-mysql-root-password --database=mydb <my-file.sql\ndocker_process_sql() {\n\tpassfileArgs=()\n\tif [ \'--dont-use-mysql-root-password\' = "$1" ]; then\n\t\tpassfileArgs+=( "$1" )\n\t\tshift\n\tfi\n\t# args sent in can override this db, since they will be later in the command\n\tif [ -n "$MYSQL_DATABASE" ]; then\n\t\tset -- --database="$MYSQL_DATABASE" "$@"\n\tfi\n\n\tmysql --defaults-extra-file=<( _mysql_passfile "${passfileArgs[@]}") --protocol=socket -uroot -hlocalhost --socket="${SOCKET}" --comments "$@"\n}\n\n# Initializes database with timezone info and root password, plus optional extra db/user\ndocker_setup_db() {\n\t# Load timezone info into database\n\tif [ -z "$MYSQL_INITDB_SKIP_TZINFO" ]; then\n\t\t# sed is for https://bugs.mysql.com/bug.php?id=20545\n\t\tmysql_tzinfo_to_sql /usr/share/zoneinfo \\\n\t\t\t| sed \'s/Local time zone must be set--see zic manual page/FCTY/\' \\\n\t\t\t| docker_process_sql --dont-use-mysql-root-password --database=mysql\n\t\t\t# tell docker_process_sql to not use MYSQL_ROOT_PASSWORD since it is not set yet\n\tfi\n\t# Generate random root password\n\tif [ -n "$MYSQL_RANDOM_ROOT_PASSWORD" ]; then\n\t\tMYSQL_ROOT_PASSWORD="$(openssl rand -base64 24)"; export MYSQL_ROOT_PASSWORD\n\t\tmysql_note "GENERATED ROOT PASSWORD: $MYSQL_ROOT_PASSWORD"\n\tfi\n\t# Sets root password and creates root users for non-localhost hosts\n\tlocal rootCreate=\n\t# default root to listen for connections from anywhere\n\tif [ -n "$MYSQL_ROOT_HOST" ] && [ "$MYSQL_ROOT_HOST" != \'localhost\' ]; then\n\t\t# no, we don\'t care if read finds a terminating character in this heredoc\n\t\t# https://unix.stackexchange.com/questions/265149/why-is-set-o-errexit-breaking-this-read-heredoc-expression/265151#265151\n\t\tread -r -d \'\' rootCreate <<-EOSQL || true\n\t\t\tCREATE USER \'root\'@\'${MYSQL_ROOT_HOST}\' IDENTIFIED BY \'${MYSQL_ROOT_PASSWORD}\' ;\n\t\t\tGRANT ALL ON *.* TO \'root\'@\'${MYSQL_ROOT_HOST}\' WITH GRANT OPTION ;\n\t\tEOSQL\n\tfi\n\n\tlocal passwordSet=\n\t# no, we don\'t care if read finds a terminating character in this heredoc (see above)\n\tread -r -d \'\' passwordSet <<-EOSQL || true\n\t\tALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'${MYSQL_ROOT_PASSWORD}\' ;\n\tEOSQL\n\n\t# tell docker_process_sql to not use MYSQL_ROOT_PASSWORD since it is just now being set\n\tdocker_process_sql --dont-use-mysql-root-password --database=mysql <<-EOSQL\n\t\t-- What\'s done in this file shouldn\'t be replicated\n\t\t--  or products like mysql-fabric won\'t work\n\t\tSET @@SESSION.SQL_LOG_BIN=0;\n\n\t\t${passwordSet}\n\t\tGRANT ALL ON *.* TO \'root\'@\'localhost\' WITH GRANT OPTION ;\n\t\tFLUSH PRIVILEGES ;\n\t\t${rootCreate}\n\t\tDROP DATABASE IF EXISTS test ;\n\tEOSQL\n\n\t# Creates a custom database and user if specified\n\tif [ -n "$MYSQL_DATABASE" ]; then\n\t\tmysql_note "Creating database ${MYSQL_DATABASE}"\n\t\tdocker_process_sql --database=mysql <<<"CREATE DATABASE IF NOT EXISTS \\`$MYSQL_DATABASE\\` ;"\n\tfi\n\n\tif [ -n "$MYSQL_USER" ] && [ -n "$MYSQL_PASSWORD" ]; then\n\t\tmysql_note "Creating user ${MYSQL_USER}"\n\t\tdocker_process_sql --database=mysql <<<"CREATE USER \'$MYSQL_USER\'@\'%\' IDENTIFIED BY \'$MYSQL_PASSWORD\' ;"\n\n\t\tif [ -n "$MYSQL_DATABASE" ]; then\n\t\t\tmysql_note "Giving user ${MYSQL_USER} access to schema ${MYSQL_DATABASE}"\n\t\t\tdocker_process_sql --database=mysql <<<"GRANT ALL ON \\`${MYSQL_DATABASE//_/\\\\_}\\`.* TO \'$MYSQL_USER\'@\'%\' ;"\n\t\tfi\n\tfi\n}\n\n_mysql_passfile() {\n\t# echo the password to the "file" the client uses\n\t# the client command will use process substitution to create a file on the fly\n\t# ie: --defaults-extra-file=<( _mysql_passfile )\n\tif [ \'--dont-use-mysql-root-password\' != "$1" ] && [ -n "$MYSQL_ROOT_PASSWORD" ]; then\n\t\tcat <<-EOF\n\t\t\t[client]\n\t\t\tpassword="${MYSQL_ROOT_PASSWORD}"\n\t\tEOF\n\tfi\n}\n\n# Mark root user as expired so the password must be changed before anything\n# else can be done (only supported for 5.6+)\nmysql_expire_root_user() {\n\tif [ -n "$MYSQL_ONETIME_PASSWORD" ]; then\n\t\tdocker_process_sql --database=mysql <<-EOSQL\n\t\t\tALTER USER \'root\'@\'%\' PASSWORD EXPIRE;\n\t\tEOSQL\n\tfi\n}\n\n# check arguments for an option that would cause mysqld to stop\n# return true if there is one\n_mysql_want_help() {\n\tlocal arg\n\tfor arg; do\n\t\tcase "$arg" in\n\t\t\t-\'?\'|--help|--print-defaults|-V|--version)\n\t\t\t\treturn 0\n\t\t\t\t;;\n\t\tesac\n\tdone\n\treturn 1\n}\n\n_main() {\n\t# if command starts with an option, prepend mysqld\n\tif [ "${1:0:1}" = \'-\' ]; then\n\t\tset -- mysqld "$@"\n\tfi\n\n\t# skip setup if they aren\'t running mysqld or want an option that stops mysqld\n\tif [ "$1" = \'mysqld\' ] && ! _mysql_want_help "$@"; then\n\t\tmysql_note "Entrypoint script for MySQL Server ${MYSQL_VERSION} started."\n\n\t\tmysql_check_config "$@"\n\t\t# Load various environment variables\n\t\tdocker_setup_env "$@"\n\t\tdocker_create_db_directories\n\n\t\t# If container is started as root user, restart as dedicated mysql user\n\t\tif [ "$(id -u)" = "0" ]; then\n\t\t\tmysql_note "Switching to dedicated user \'mysql\'"\n\t\t\texec gosu mysql "$BASH_SOURCE" "$@"\n\t\tfi\n\n\t\t# there\'s no database, so it needs to be initialized\n\t\tif [ -z "$DATABASE_ALREADY_EXISTS" ]; then\n\t\t\tdocker_verify_minimum_env\n\n\t\t\t# check dir permissions to reduce likelihood of half-initialized database\n\t\t\tls /docker-entrypoint-initdb.d/ > /dev/null\n\n\t\t\tdocker_init_database_dir "$@"\n\n\t\t\tmysql_note "Starting temporary server"\n\t\t\tdocker_temp_server_start "$@"\n\t\t\tmysql_note "Temporary server started."\n\n\t\t\tmysql_socket_fix\n\t\t\tdocker_setup_db\n\t\t\tdocker_process_init_files /docker-entrypoint-initdb.d/*\n\n\t\t\tmysql_expire_root_user\n\n\t\t\tmysql_note "Stopping temporary server"\n\t\t\tdocker_temp_server_stop\n\t\t\tmysql_note "Temporary server stopped"\n\n\t\t\techo\n\t\t\tmysql_note "MySQL init process done. Ready for start up."\n\t\t\techo\n\t\telse\n\t\t\tmysql_socket_fix\n\t\tfi\n\tfi\n\texec "$@"\n}\n\n# If we are sourced from elsewhere, don\'t perform any further actions\nif ! _is_sourced; then\n\t_main "$@"\nfi\n'})})]})}function _(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},1151:(t,e,n)=>{n.d(e,{Z:()=>a,a:()=>i});var s=n(7294);const o={},r=s.createContext(o);function i(t){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),s.createElement(r.Provider,{value:e},t.children)}}}]);